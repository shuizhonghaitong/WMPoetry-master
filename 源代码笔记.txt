一、预处理
1.preprocess.py
输入：corpus.txt 每行是一首五言/七言绝句，句与句之间用 | 分隔。已分词，词与词之间用空格分开。
输出：train.txt  valid.txt  test.txt  每行有三部分，用 # 分隔。分别是keywords，诗，tonal pattern。
1.1 如何得到tonal pattern
1.1.1 押韵：
词林正韵 cilinList.txt
古音分为平，上，去，入共4声。上，去，入统称仄声。
词林正韵是先按韵母，再按声调共2个层级来分类的。摊开来后共33类，编号为1~33，其中属于平声的是1,3,5,7,9,11,13,15,17,19,21,23,25,27。编号34表示平声，编号35表示仄声。编号0表示平/仄声。
五言/七言绝句共有4句，每句5个/7个字。第三句的尾字必为仄声（35）。对于绝句，第二四句尾字押韵，且必为平声。第一句的尾字可平可仄。
对每首诗，得到每句尾字的编号。由于一个字可能对应几个编号，需进一步详细说明。对每句，先查poemyun，如果有，返回编号，如果没有，查word_map，如果没有，说明该字只有一个编号，返回yun_dic里该字的编号，如果有，查mulword_map有无倒数两个字构成的词，如果有，返回对应编号，如果没有，查mulword_map里有无倒数三个字组成的词，如果有，返回编号，如果没有，返回word_map的编号。
注：word_map字对应的编号是该字出现次数最多的编号。
然后，把第二四句设为相同（若某个缺失的话），把第三句设为仄声（35），若第一句不在平声列表里，则设为仄声（35）。
也就是说，只关注平声列表（1,3,5,...,27）、仄声（35）。
问题：
(1)mulword_map，poemyun的构建代码里没有？
(2)得到编号的规则为什么是这样的？
1.1.2 平仄：
五言/七言绝句共有4种句式：仄仄脚，平平脚，仄平脚，平仄脚。
对每句，判断它属于哪一种句式（用到pingsheng.txt，zesheng.txt），取出对应的012编码。
把0,1,2分别转换为34,35,0。把它与前面的尾字编号结合（用它来替代最后一个）。
问题：
(1)平声，仄声字典从哪里来？
(2)几种句式多出来的几种是怎么回事？
1.2 如何得到keywords
FunctionWords.txt和fchar.txt构成停用词字典。
对每首诗，根据分词结果，得到词的列表。先遍历词的列表，过滤掉停用词。对新的词列表，看哪些词在goodwords.txt中，在的词存入keywords列表，不在的词存入leftwords列表。看keywords列表中有几个词，若刚好是4个，直接返回keywords列表；若多于4个，选出tfidf值最高的4个；若少于4个，从leftwords中选出tfidf值大的几个，和keywords一起返回；若少于4个，且leftwords的所有词再加上keywords的词还是不够4个，则只返回keywords列表。
也就是说，goodwords.txt是优先的，tfidf是次优先的。
问题：
(1)FunctionWords.txt  fchar.txt  goodwords.txt是怎么来的？
(2)tfidf或textrank是从哪训练得到的？
2.build_dic.py
输入：train.txt
输出：vocab.pkl  ivocab.pkl
把三部分中的第二部分（诗）的每个字构建成 字-编号 的字典，和 编号-字 的字典。还有</s>、UNK、GO、PAD。
3.binarize.py
输入：train.txt  vocab.pkl
输出：train.pkl
把第一部分和第二部分的每个字变成编号。